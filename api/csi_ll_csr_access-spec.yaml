module:
  name: Low-Level CSR ACCESS API
  description: >
    APIs giving access to CSRs.
  c-specific: true
  c-filename: csi_csr_access.h
  c-include-files:
  - filename: csi_types.h
    system-header: false
  - filename: stdint.h
    system-header: true

  c-definitions:
  - comment: >
      macros
    fragment: |
      #define __STR(s)                #s
      #define STRINGIFY(s)            __STR(s)
      #define __ASM                   __asm
  - comment:
      Read the content of csr register to __v,
      then write content of val into csr register, then return __v
    fragment: |
      #define csi_csr_swap(csr, val)                                  \
          ({                                                          \
              rv_csr_t __v = (unsigned long)(val);                    \
              __ASM volatile("csrrw %0, " STRINGIFY(csr) ", %1"       \
                           : "=r"(__v)                                \
                           : "rK"(__v)                                \
                           : "memory");                               \
              __v;                                                    \
          })
  - comment: Read the content of csr register to __v and return it
    fragment: |
      #define csi_csr_read(csr)                                       \
          ({                                                          \
              rv_csr_t __v;                                           \
              __ASM volatile("csrr %0, " STRINGIFY(csr)               \
                           : "=r"(__v)                                \
                           :                                          \
                           : "memory");                               \
              __v;                                                    \
          })
  - comment: Write the content of val to csr register
    fragment: |
      #define csi_csr_write(csr, val)                                 \
          ({                                                          \
              rv_csr_t __v = (rv_csr_t)(val);                         \
              __ASM volatile("csrw " STRINGIFY(csr) ", %0"            \
                           :                                          \
                           : "rK"(__v)                                \
                           : "memory");                               \
          })
  - comment:
      Read the content of csr register to __v,
      then set csr register to be __v | val, then return __v
    fragment: |
      #define csi_csr_read_set(csr, val)                              \
          ({                                                          \
              rv_csr_t __v = (rv_csr_t)(val);                         \
              __ASM volatile("csrrs %0, " STRINGIFY(csr) ", %1"       \
                           : "=r"(__v)                                \
                           : "rK"(__v)                                \
                           : "memory");                               \
              __v;                                                    \
          })
  - comment: Set csr register to be csr_content | val
    fragment: |
      #define csi_csr_set(csr, val)                                   \
          ({                                                          \
              rv_csr_t __v = (rv_csr_t)(val);                         \
              __ASM volatile("csrs " STRINGIFY(csr) ", %0"            \
                           :                                          \
                           : "rK"(__v)                                \
                           : "memory");                               \
          })
  - comment:
      Read the content of csr register to __v,
      then set csr register to be __v & ~val, then return __v
    fragment: |
      #define csi_csr_read_clear(csr, val)                            \
          ({                                                          \
              rv_csr_t __v = (rv_csr_t)(val);                         \
              __ASM volatile("csrrc %0, " STRINGIFY(csr) ", %1"       \
                           : "=r"(__v)                                \
                           : "rK"(__v)                                \
                           : "memory");                               \
              __v;                                                    \
          })
  - comment: Set csr register to be csr_content & ~val
    fragment: |
      #define csi_csr_clear(csr, val)                                 \
          ({                                                          \
              rv_csr_t __v = (rv_csr_t)(val);                         \
              __ASM volatile("csrc " STRINGIFY(csr) ", %0"            \
                           :                                          \
                           : "rK"(__v)                                \
                           : "memory");                               \
          })