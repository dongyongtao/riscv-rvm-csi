module:
  name: Low-Level CSR ACCESS API
  description: >
    APIs giving access to CSRs.
  c-specific: false
  no-assembler: true
  c-filename: csi_ll_csr_access.h
  c-include-files:
  - filename: csi_types.h
    system-header: false
  - filename: stdint.h
    system-header: true

  c-definitions:
  - comment: >
      macros
    fragment: |
      #define __STR(s)                #s
      #define STRINGIFY(s)            __STR(s)
      #define __ASM                   __asm
  macros:
    - name: csi_csr_swap
      description: >
        Read the content of csr register to __v, then write content of val into csr register,
        then return __v.
      c-params:
        - name: csr
          description: CSR macro definition
          type: unsigned long
        - name: val
          description: value to store into the CSR register
          type: unsigned long
      c-return-value: 
        description: the CSR register value before written
        type: unsigned long
      code: |
        #define csi_csr_swap(csr, val)                                  \
            ({                                                          \
                rv_csr_t __v = (unsigned long)(val);                    \
                __ASM volatile("csrrw %0, " STRINGIFY(csr) ", %1"       \
                            : "=r"(__v)                                \
                            : "rK"(__v)                                \
                            : "memory");                               \
                __v;                                                    \
            })
    - name: csi_csr_read
      description: >
        Read the content of csr register to __v and return it.
      c-params:
        - name: csr
          description: CSR macro definition
          type: unsigned long
      c-return-value: 
        description: the CSR register value
        type: unsigned long
      code: |
        #define csi_csr_read(csr)                                       \
            ({                                                          \
                rv_csr_t __v;                                           \
                __ASM volatile("csrr %0, " STRINGIFY(csr)               \
                              : "=r"(__v)                                \
                              :                                          \
                              : "memory");                               \
                __v;                                                    \
            })
    - name: csi_csr_write
      description: >
        Write the content of val to csr register.
      c-params:
        - name: csr
          description: CSR macro definition
          type: unsigned long
        - name: val
          description: value to store into the CSR register
          type: unsigned long
      code: |
        #define csi_csr_write(csr, val)                                 \
            ({                                                          \
                rv_csr_t __v = (rv_csr_t)(val);                         \
                __ASM volatile("csrw " STRINGIFY(csr) ", %0"            \
                              :                                          \
                              : "rK"(__v)                                \
                              : "memory");                               \
            })
    - name: csi_csr_read_set
      description: >
        Read the content of csr register to __v, then set csr register to be __v | val,
        then return __v.
      c-params: 
        - name: csr
          description: CSR macro definition
          type: unsigned long
        - name: val
          description: Mask value to be used wih csrrs instruction
          type: unsigned long
      c-return-value: 
        description: the CSR register value before written
        type: unsigned long
      code: |
        #define csi_csr_read_set(csr, val)                              \
            ({                                                          \
                rv_csr_t __v = (rv_csr_t)(val);                         \
                __ASM volatile("csrrs %0, " STRINGIFY(csr) ", %1"       \
                            : "=r"(__v)                                \
                            : "rK"(__v)                                \
                            : "memory");                               \
                __v;                                                    \
            })
    - name: csi_csr_set
      description: >
        Set csr register to be csr_content | val.
      c-params:
        - name: csr
          description: CSR macro definition
          type: unsigned long
        - name: val
          description: Mask value to be used wih csrs instruction
          type: unsigned long
      code: |
        #define csi_csr_set(csr, val)                                   \
            ({                                                          \
                rv_csr_t __v = (rv_csr_t)(val);                         \
                __ASM volatile("csrs " STRINGIFY(csr) ", %0"            \
                            :                                          \
                            : "rK"(__v)                                \
                            : "memory");                               \
            })
    - name: csi_csr_read_clear
      description: >
        Read the content of csr register to __v, then set csr register to be __v & ~val,
        then return __v.
      c-params:
        - name: csr
          description: CSR macro definition
          type: unsigned long
        - name: val
          description: Mask value to be used wih csrrc instruction
          type: unsigned long
      c-return-value: 
        description: the CSR register value before written
        type: unsigned long
      code: |
        #define csi_csr_read_clear(csr, val)                            \
            ({                                                          \
                rv_csr_t __v = (rv_csr_t)(val);                         \
                __ASM volatile("csrrc %0, " STRINGIFY(csr) ", %1"       \
                            : "=r"(__v)                                \
                            : "rK"(__v)                                \
                            : "memory");                               \
                __v;                                                    \
            })
    - name: csi_csr_clear
      description: >
        Set csr register to be csr_content & ~val
      c-params:
        - name: csr
          description: CSR macro definition
          type: unsigned long
        - name: val
          description: Mask value to be used wih csrc instruction
          type: unsigned long
      code: |
        #define csi_csr_clear(csr, val)                                 \
            ({                                                          \
                rv_csr_t __v = (rv_csr_t)(val);                         \
                __ASM volatile("csrc " STRINGIFY(csr) ", %0"            \
                            :                                          \
                            : "rK"(__v)                                \
                            : "memory");                               \
            })